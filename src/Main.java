import net.SSocRunnable;
import net.SocketRW;
import net.SocketRWResponder;
import net.UserInputRunnable;

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import java.net.Socket;

import java.util.Map;
import java.util.HashMap;
// import java.util.Iterator;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import concurrent.ConcurrentSocketWriter;
import concurrent.ConcurrentConsoleReader;

// my stratedy about comments: don't go down the rabit hole, don't comment
// unless you have sth important to say

// thread 3:
// reads user input
// decide

// thread 2:
// write to the client

// thread 1:
// wait for the answer

// TODO play sounds when typing or receving message (disable with a flag)
// TODO add config file for all the flags and deafult port and all...
// TODO attend System.exit(1)'s
// TODO replace System.err... with a propper logging system
public class Main{

	public static void main(String[] args){


		/*
		// see what args you've given
		// don't forget to import iterator
		Iterator<String> it=argses.values().iterator();
		while(it.hasNext())
			System.out.println(it.next());*/

		/* ARGS PROCESSING */
		Map<String,String> argses=parseArgs(args);
		String username = argses.containsKey("username")?"["+argses.get("username")+"]":"[CLIENT]";
		int localPort,connectPort;
		try{
			localPort=argses.containsKey("local-port")?Integer.parseInt(argses.get("local-port")):2022;
			connectPort=argses.containsKey("connect-port")?Integer.parseInt(argses.get("connect-port")):2022;
		}catch(NumberFormatException nfe){
			System.err.println("[main thread] - wrong local port format, defaulted to 2022");
			localPort=2022;
			connectPort=2022;
		}

		/* START - decide which functionality to use */
		// loops are a bit deep to dig in thoses functions...
		if(argses.containsKey("connect")){
			if(! argses.containsKey("connect-host") || !argses.containsKey("connect-port")){
				System.err.println("concetion address not provided, please use -h or --help for further info");
				System.exit(1);
			}
			connect(argses.get("connect-host"),connectPort,username);
		}
		else if (argses.containsKey("listen")){
			listen(localPort,username);
		}
		/**/
	}

	public static void connect(String host,int port,String username){
		/*
		try{
			BlockingQueue<String> inputFeed=new BlockingQueue<String>();
			System.out.println("connecting to "+host+":port");
			srwr.run(); // has a while loop AND a try catch
		}catch(IOException ioe){

			// this catch block only deals with "new Socket" statement
			System.err.println("[connect] - IOException : "+ioe.getMessage());
			System.exit(1);
		}*/
	}

	/**
		* the only difference between this function and connect is that in this
		* function, the socket is generated by server, in the other one,it's
		* initiated by the client in the first place
	*/
	public static void listen(int port,String username){

		SSocRunnable ssr=new SSocRunnable(port,(socket)->{
			SocketRW srw=new SocketRW(socket); // wrapps the socket made by listening
			BlockingQueue<String> inputFeed = new LinkedBlockingQueue<String>();
			Thread tReader=new Thread(new ConcurrentConsoleReader(inputFeed));
			Thread tWriter=new Thread(new ConcurrentSocketWriter(inputFeed,srw));

			tReader.start();
			tWriter.start();

			System.out.println("Threads started...");
		});
		/**/

		System.out.println("listening on port "+port+"...");
		ssr.run();
	}


	public static Map<String,String> parseArgs(String[] args){
		Map<String,String> m=new HashMap<String,String>();
		for(int i=0;i<args.length;i++){

			if((args[i].equals("-u") || args[i].equals("--username") )&& i<=args.length-2)
				m.put("username",args[i+1]);

			else if(args[i].equals("-h") || args[i].equals("--help")){
				m.put("HELP_NEEDED","true");
				break;
			}

			else if((args[i].equals("-lp") || args[i].equals("--local-port") )&& i<=args.length-2)
				m.put("local-port",args[i+1]);

			/* this is a command in and of itself : to connect first not just listen */
			else if(args[i].equals("connect") && i<=args.length-3){
				m.put("connect","true");
				m.put("connect-host",args[i+1]); // host
				m.put("connect-port",args[i+2]); // port
			}

			/* default behaviour is to start listening... */
			else if(args[i].equals("listen"))
				m.put("listen","true");
		}
		return m;
	}

	public static void printH(){
		System.out.println(
			"JTalk by AmirH (https://github.com/AmirHBahrami)\n"
			+"\tdemonstrated usage (will change in the future): java Main (listen | connect <host> [port]) [...flags]\n"
			+"\tgeneral flags :\n"
			+"\t\t-h || --help : this help\n"
			+"\t\t-u || --username : the username to represent you in the chat\n"
			+"\t'listen' flags :"
			+"\t\t-lp || --local-port : the port to listen on, on the local machine (default:2022)\n"
			+"\texample: java Main connect localhost 2022 -u AmirH\n"
			+"to contact me, send any email to amirhesam.bahrami@yahoo.com\n"
		);
	}
}
